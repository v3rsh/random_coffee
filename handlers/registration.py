import logging
from datetime import datetime

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from database.models import User, Interest, MeetingFormat
from database.interests_data import DEFAULT_INTERESTS
from keyboards import (
    create_meeting_format_keyboard,
    create_interest_keyboard,
    create_yes_no_keyboard,
    get_confirmation_keyboard,
    get_meeting_format_keyboard,
    create_weekday_keyboard,
    create_timeslot_keyboard
)
from services.user_service import get_user, create_user, update_user
from states import RegistrationStates

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registration_router = Router()
logger = logging.getLogger(__name__)


@registration_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user = await get_user(session, message.from_user.id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if user and user.registration_complete:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ –ù–µ—Å–ª—É—á–∞–π–Ω–æ. –û–∂–∏–¥–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
        )
        await state.clear()
        return
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —Ç—ã –ø–æ–ø–∞–ª –≤ —ç—Ç–æ—Ç –±–æ—Ç, –∑–Ω–∞—á–∏—Ç ‚Äî —ç—Ç–æ –Ω–µ—Å–ª—É—á–∞–π–Ω–æ üòå\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "- –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –≤ –±–∏–ª–∞–π–Ω–µ\n"
        "- –æ–±–º–µ–Ω—è—Ç—å—Å—è –æ–ø—ã—Ç–æ–º\n"
        "- –æ–±—Å—É–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã\n"
        "- –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è\n"
        "–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?",
        reply_markup=create_yes_no_keyboard("–î–∞, —Ö–æ—á—É!", "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
    )


@registration_router.callback_query(F.data == "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ")
async def explain_more(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
    """
    await callback.message.edit_text(
        "–Ω–µ—Å–ª—É—á–∞–π–Ω–æ ‚Äî —ç—Ç–æ:\n\n"
        "‚úÖ –≤—Å—Ç—Ä–µ—á–∏ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –∏ –≥–æ—Ä–æ–¥–æ–≤\n"
        "‚úÖ 15-30 –º–∏–Ω—É—Ç –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –≤ –æ—Ñ–∏—Å–µ\n"
        "‚úÖ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–±–µ —Ç–µ–º\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1. –¢—ã –∑–∞–ø–æ–ª–Ω—è–µ—à—å –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É\n"
        "2. –Ø –ø–æ–¥–±–∏—Ä–∞—é —Ç–µ–±–µ –∫–æ–ª–ª–µ–≥—É —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏\n"
        "3. –í—ã –≤—Å—Ç—Ä–µ—á–∞–µ—Ç–µ—Å—å –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏ –æ–±—â–∞–µ—Ç–µ—Å—å\n\n"
        "–ü–æ–ø—Ä–æ–±—É–µ–º? üòä",
        reply_markup=create_yes_no_keyboard("–î–∞, —É—á–∞—Å—Ç–≤—É—é!", "–ü–æ–∑–∂–µ")
    )
    await callback.answer()


@registration_router.callback_query(F.data == "–ü–æ–∑–∂–µ")
async def postpone_registration(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∑–∂–µ"
    """
    await callback.message.edit_text(
        "–•–æ—Ä–æ—à–æ! –ù–∞–ø–æ–º–Ω—é —Ç–µ–±–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é. \n"
        "–ê –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å —Ä–∞–Ω—å—à–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´‚Äé–£—á–∞—Å—Ç–≤—É—é¬ª üòâ"
    )
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await callback.answer()


@registration_router.message(F.text.lower() == "—É—á–∞—Å—Ç–≤—É—é")
@registration_router.callback_query(F.data == "–î–∞, —Ö–æ—á—É!" or F.data == "–î–∞, —É—á–∞—Å—Ç–≤—É—é!")
async def start_registration(message: Message | CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if isinstance(message, CallbackQuery):
        message_obj = message.message
        await message.answer()
    else:
        message_obj = message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = await get_user(session, message_obj.chat.id)
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await create_user(
            session, 
            telegram_id=message_obj.chat.id,
            username=message_obj.chat.username,
            full_name=message_obj.chat.full_name
        )
    
    await message_obj.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
        "–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –º–∏–Ω–∏-–∞–Ω–∫–µ—Ç—É ‚Äî —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç."
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –∏–º–µ–Ω–∏
    await message_obj.answer(
        "1/6 üîπ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏ –∏–º—è –∏ –Ω–∏–∫ –≤ TG, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞, @name_beeline"
    )
    await state.set_state(RegistrationStates.waiting_for_name)


@registration_router.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è –∏ username –ø–æ –∑–∞–ø—è—Ç–æ–π
    name_parts = message.text.split(",", 1)
    
    full_name = name_parts[0].strip()
    username = name_parts[1].strip() if len(name_parts) > 1 else None
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å username, —É–±–∏—Ä–∞–µ–º @ –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if username and username.startswith("@"):
        username = username[1:]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(full_name=full_name, username=username)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_user(
        session, 
        message.from_user.id, 
        data={"full_name": full_name, "username": username}
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∏ —Ä–æ–ª–∏
    await message.answer(
        "2/6 üîπ –¢–≤–æ–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏ —Ä–æ–ª—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: –º–µ–Ω–µ–¥–∂–µ—Ä, –æ—Ç–¥–µ–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π"
    )
    await state.set_state(RegistrationStates.waiting_for_department)


@registration_router.message(StateFilter(RegistrationStates.waiting_for_department))
async def process_department(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏ —Ä–æ–ª–∏
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∏ —Ä–æ–ª–∏
    department_role = message.text.split(",", 1)
    
    role = department_role[0].strip()
    department = department_role[1].strip() if len(department_role) > 1 else ""
    
    await state.update_data(department=department, role=role)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_user(
        session, 
        message.from_user.id, 
        {"department": department, "role": role}
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Å—Ç—Ä–µ—á–∏
    await message.answer(
        "3/6 üîπ –§–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏:",
        reply_markup=create_meeting_format_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_format)


@registration_router.callback_query(StateFilter(RegistrationStates.waiting_for_format))
async def process_format(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ callback_data
    format_text = callback.data
    meeting_format = None
    
    if format_text == "–û–Ω–ª–∞–π–Ω":
        meeting_format = MeetingFormat.ONLINE
    elif format_text == "–û—Ñ—Ñ–ª–∞–π–Ω":
        meeting_format = MeetingFormat.OFFLINE
    else:
        meeting_format = MeetingFormat.ANY
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏
    await state.update_data(meeting_format=meeting_format.value)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_user(
        session, 
        callback.from_user.id, 
        {"meeting_format": meeting_format}
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer()
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: {meeting_format.value}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –≥–æ—Ä–æ–¥–µ –∏ –æ—Ñ–∏—Å–µ
    await callback.message.answer(
        "4/6 üîπ –ì–æ—Ä–æ–¥ –∏ –æ—Ñ–∏—Å –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´‚Äé–ú–æ—Å–∫–≤–∞, –æ—Ñ–∏—Å –Ω–∞ –õ–µ–Ω–∏–Ω—Å–∫–æ–º¬ª"
    )
    await state.set_state(RegistrationStates.waiting_for_location)


@registration_router.message(StateFilter(RegistrationStates.waiting_for_location))
async def process_location(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ –∏ –æ—Ñ–∏—Å–∞
    """
    location = message.text.split(",", 1)
    
    city = location[0].strip()
    office = location[1].strip() if len(location) > 1 else ""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
    await state.update_data(city=city, office=office)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_user(
        session, 
        message.from_user.id, 
        {"city": city, "office": office}
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    interests = await session.execute(select(Interest))
    interests = interests.scalars().all()
    
    if not interests:
        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –∏—Ö
        for interest_data in DEFAULT_INTERESTS:
            interest = Interest(name=interest_data["name"], emoji=interest_data["emoji"])
            session.add(interest)
        await session.commit()
        
        interests = await session.execute(select(Interest))
        interests = interests.scalars().all()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö
    await message.answer(
        "5/6 üîπ –¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–≤—ã–±–µ—Ä–∏ 1-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞):",
        reply_markup=create_interest_keyboard(interests)
    )
    await state.set_state(RegistrationStates.waiting_for_interests)


@registration_router.callback_query(StateFilter(RegistrationStates.waiting_for_interests), F.data.startswith("interest_"))
async def process_interests(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    user_data = await state.get_data()
    selected_interests = user_data.get("selected_interests", [])
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏–∑ callback_data
    interest_id = int(callback.data.split("_")[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å —É–∂–µ –∏–ª–∏ –Ω–µ—Ç
    if interest_id in selected_interests:
        selected_interests.remove(interest_id)
    else:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–æ 3
        if len(selected_interests) < 3:
            selected_interests.append(interest_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    await state.update_data(selected_interests=selected_interests)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    interests_info = []
    for interest_id in selected_interests:
        interest = await session.get(Interest, interest_id)
        if interest:
            interests_info.append(f"{interest.emoji} {interest.name}")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    all_interests = await session.execute(select(Interest))
    all_interests = all_interests.scalars().all()
    
    if selected_interests:
        selected_text = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:\n" + "\n".join(interests_info)
        if len(selected_interests) >= 1:
            selected_text += "\n\n–ù–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª, –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª –≤—ã–±–æ—Ä"
    else:
        selected_text = "–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å"
    
    await callback.message.edit_text(
        f"5/6 üîπ –¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–≤—ã–±–µ—Ä–∏ 1-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞):\n\n{selected_text}",
        reply_markup=create_interest_keyboard(all_interests, selected_interests, show_done=(len(selected_interests) >= 1))
    )


@registration_router.callback_query(StateFilter(RegistrationStates.waiting_for_interests), F.data == "interests_done")
async def process_interests_done(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await get_user(session, callback.from_user.id)
    if not user:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = await state.get_data()
    selected_interests = user_data.get("selected_interests", [])
    
    interests = []
    for interest_id in selected_interests:
        result = await session.execute(select(Interest).where(Interest.id == interest_id))
        interest = result.scalar_one_or_none()
        if interest:
            interests.append(interest)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await session.refresh(user, ["interests"])
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    user.interests = []
    await session.commit()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    for interest in interests:
        user.interests.append(interest)
    await session.commit()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    await callback.message.edit_text(
        "–ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
    )
    
    await callback.message.answer(
        "6/7 üîπ –í—ã–±–µ—Ä–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≥–æ—Ç–æ–≤(–∞) –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è.",
        reply_markup=create_weekday_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_days)


@registration_router.callback_query(StateFilter(RegistrationStates.waiting_for_days), F.data.startswith("day_"))
async def process_days(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    selected_day = callback.data.split("_")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
    user_data = await state.get_data()
    selected_days = user_data.get("selected_days", [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –¥–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞
    if selected_day in selected_days:
        selected_days.remove(selected_day)
    else:
        selected_days.append(selected_day)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(selected_days=selected_days)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=create_weekday_keyboard(selected_days)
    )


@registration_router.callback_query(StateFilter(RegistrationStates.waiting_for_days), F.data == "days_done")
async def process_days_done(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏
    user_data = await state.get_data()
    selected_days = user_data.get("selected_days", [])
    
    # –ï—Å–ª–∏ –¥–Ω–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å
    if not selected_days:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", show_alert=True)
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –≤ —Å—Ç—Ä–æ–∫—É, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é –∑–∞–ø—è—Ç—ã–º–∏
    days_str = ",".join(selected_days)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await update_user(
        session, 
        callback.from_user.id, 
        {"available_days": days_str}
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    await callback.message.edit_text(
        "–î–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –¥–ª—è –≤—Å—Ç—Ä–µ—á."
    )
    
    await callback.message.answer(
        "7/7 üîπ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è?",
        reply_markup=create_timeslot_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_time_slot)


@registration_router.callback_query(StateFilter(RegistrationStates.waiting_for_time_slot), F.data.startswith("slot_"))
async def process_time_slot(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    """
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
        selected_slot = callback.data.split("_")[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(available_time_slot=selected_slot)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        await update_user(
            session, 
            callback.from_user.id, 
            {"available_time_slot": selected_slot}
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–æ—Ç–æ
        await callback.message.edit_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç {selected_slot} —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
        )
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Ñ–æ—Ç–æ
        await callback.message.answer(
            "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ?",
            reply_markup=create_yes_no_keyboard("–î–∞, –∑–∞–≥—Ä—É–∂–∞—é", "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")
        )
        await state.set_state(RegistrationStates.waiting_for_photo)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@registration_router.message(StateFilter(RegistrationStates.waiting_for_photo), F.photo)
async def process_photo(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    photo = message.photo[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
    await state.update_data(photo_id=photo.file_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_user(
        session, 
        message.from_user.id, 
        {"photo_id": photo.file_id}
    )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await complete_registration(message, state, session)


@registration_router.callback_query(StateFilter(RegistrationStates.waiting_for_photo), F.data == "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")
async def skip_photo(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    """
    await callback.answer()
    await callback.message.edit_text("–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ —Ñ–æ—Ç–æ.")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await complete_registration(callback.message, state, session)


async def complete_registration(message: Message, state: FSMContext, session: AsyncSession):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await update_user(
        session, 
        message.chat.id, 
        {"registration_complete": True}
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —è–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π interests
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º selectinload –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è lazy loading
    query = select(User).where(User.telegram_id == message.chat.id).options(selectinload(User.interests))
    result = await session.execute(query)
    user = result.scalar_one_or_none()
    
    if not user:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    interests_text = ", ".join([interest.name for interest in user.interests]) if user.interests else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–Ω–µ–π –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    days_list = user.available_days.split(",") if user.available_days else []
    days_names = {
        "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
        "wednesday": "–°—Ä–µ–¥–∞",
        "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
        "friday": "–ü—è—Ç–Ω–∏—Ü–∞"
    }
    days_text = ", ".join([days_names.get(day, day) for day in days_list]) if days_list else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    user_info = (
        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n"
        f"‚Ññ{user.user_number}\n"
        f"–ò–º—è: {user.full_name}\n"
        f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {user.department}, {user.role}\n"
        f"–§–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á: {user.meeting_format.value if user.meeting_format else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–õ–æ–∫–∞—Ü–∏—è: {user.city}, {user.office}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_text}\n"
        f"–î–Ω–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á: {days_text}\n"
        f"–í—Ä–µ–º—è: {user.available_time_slot}\n\n"
        "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∏—Å–∫–∞—Ç—å —Ç–µ–±–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥—É ‚Äì —Å—Ä–∞–∑—É —Å–æ–æ–±—â—É! üïµÔ∏è‚Äç‚ôÇÔ∏è"
    )
    
    await message.answer(user_info)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear() 