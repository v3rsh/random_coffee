from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import User, TopicType, MeetingFormat
from keyboards import (
    get_start_keyboard, get_skip_keyboard, get_meeting_format_keyboard,
    get_topics_keyboard, get_confirmation_keyboard, get_topic_name, get_topic_emoji
)
from services.user_service import get_user, create_user, update_user, add_user_topic, remove_user_topic
from states import RegistrationStates

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registration_router = Router()


@registration_router.message(CommandStart())
async def cmd_start(message: Message, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    user = await get_user(session, message.from_user.id)
    
    if user and user.registration_complete:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ Random Coffee.\n"
            "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è –±—É–¥—É –∏—Å–∫–∞—Ç—å –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏. üëã",
            reply_markup=get_start_keyboard()
        )
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            full_name = message.from_user.full_name
            username = message.from_user.username
            user = await create_user(session, message.from_user.id, full_name, username)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! üëã\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Random Coffee! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á —Å –∫–æ–ª–ª–µ–≥–∞–º–∏. "
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –∏ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä—É–≥ –æ–±—â–µ–Ω–∏—è.\n\n"
            "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–¥–±–∏—Ä–∞—Ç—å –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤."
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        await message.answer(
            "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ Telegram)",
            reply_markup=get_skip_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏"
        await message.bot.state_storage.set_state(message.from_user.id, RegistrationStates.waiting_for_name)


@registration_router.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = await get_user(session, message.from_user.id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
    if message.text != "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await update_user(session, user, full_name=message.text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª/—Ä–æ–ª—å
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª –∏–ª–∏ —Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞¬ª, ¬´–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥¬ª –∏ —Ç.–¥.):",
        reply_markup=get_skip_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(RegistrationStates.waiting_for_department)


@registration_router.message(StateFilter(RegistrationStates.waiting_for_department))
async def process_department(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–¥–µ–ª–∞/—Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = await get_user(session, message.from_user.id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª
    if message.text != "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await update_user(session, user, department=message.text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –∏–ª–∏ –≤—Ä–µ–º—è, —É–¥–æ–±–Ω–æ–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä, ¬´10:00-18:00¬ª –∏–ª–∏ ¬´–ü–æ—Å–ª–µ –æ–±–µ–¥–∞¬ª:",
        reply_markup=get_skip_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(RegistrationStates.waiting_for_work_hours)


@registration_router.message(StateFilter(RegistrationStates.waiting_for_work_hours))
async def process_work_hours(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = await get_user(session, message.from_user.id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
    if message.text != "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        work_hours = message.text
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —á–∞—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
        if "-" in work_hours and len(work_hours.split("-")) == 2:
            start_time, end_time = work_hours.split("-")
            start_time = start_time.strip()
            end_time = end_time.strip()
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
            if ":" in start_time and ":" in end_time:
                await update_user(session, user, work_hours_start=start_time, work_hours_end=end_time)
            else:
                # –ò–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                await update_user(session, user, work_hours_start=work_hours)
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            await update_user(session, user, work_hours_start=work_hours)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏:",
        reply_markup=get_meeting_format_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(RegistrationStates.waiting_for_meeting_format)


@registration_router.callback_query(StateFilter(RegistrationStates.waiting_for_meeting_format), F.data.startswith("format:"))
async def process_meeting_format(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ callback data
    format_value = callback.data.split(":")[1]
    meeting_format = MeetingFormat(format_value)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    await update_user(session, user, meeting_format=meeting_format)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=get_topics_keyboard()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(selected_topics=[])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(RegistrationStates.waiting_for_topics)


@registration_router.callback_query(StateFilter(RegistrationStates.waiting_for_topics), F.data.startswith("topic:"))
async def process_topic_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º –¥–ª—è –æ–±—â–µ–Ω–∏—è.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
    user_data = await state.get_data()
    selected_topics = user_data.get("selected_topics", [])
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–∑ callback data
    topic_value = callback.data.split(":")[1]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞
    if topic_value in selected_topics:
        selected_topics.remove(topic_value)
    else:
        selected_topics.append(topic_value)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    await state.update_data(selected_topics=selected_topics)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º
    await callback.message.edit_reply_markup(reply_markup=get_topics_keyboard(selected_topics))


@registration_router.callback_query(StateFilter(RegistrationStates.waiting_for_topics), F.data == "topics_done")
async def process_topics_done(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º.
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
    user_data = await state.get_data()
    selected_topics = user_data.get("selected_topics", [])
    
    # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É
    if not selected_topics:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await get_user(session, callback.from_user.id)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.topics.clear()
    await session.commit()
    
    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
    for topic_value in selected_topics:
        topic = TopicType(topic_value)
        await add_user_topic(session, user, topic)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    meeting_format_name = {
        MeetingFormat.OFFLINE: "–û—Ñ—Ñ–ª–∞–π–Ω üè¢",
        MeetingFormat.ONLINE: "–û–Ω–ª–∞–π–Ω üíª",
        MeetingFormat.ANY: "–õ—é–±–æ–π üîÑ"
    }.get(user.meeting_format, "–ù–µ —É–∫–∞–∑–∞–Ω")
    
    topics_str = "\n".join([
        f"‚Ä¢ {get_topic_emoji(TopicType(topic))} {get_topic_name(TopicType(topic))}"
        for topic in selected_topics
    ])
    
    work_hours = f"{user.work_hours_start}"
    if user.work_hours_end:
        work_hours += f" - {user.work_hours_end}"
    
    summary = (
        f"üìã *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Random Coffee:*\n\n"
        f"üë§ *–ò–º—è:* {user.full_name}\n"
        f"üè¢ *–û—Ç–¥–µ–ª/—Ä–æ–ª—å:* {user.department or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üïí *–†–∞–±–æ—á–∏–µ —á–∞—Å—ã:* {work_hours or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"ü§ù *–§–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á:* {meeting_format_name}\n\n"
        f"üìå *–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã:*\n{topics_str}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await callback.message.edit_text(
        summary,
        reply_markup=get_confirmation_keyboard(),
        parse_mode="Markdown"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(RegistrationStates.confirming_data)


@registration_router.callback_query(StateFilter(RegistrationStates.confirming_data), F.data == "confirm_registration")
async def confirm_registration(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    # –ü–æ–º–µ—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
    user = await get_user(session, callback.from_user.id)
    await update_user(session, user, registration_complete=True)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await callback.message.edit_text(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ Random Coffee. –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è –±—É–¥—É –ø–æ–¥–±–∏—Ä–∞—Ç—å –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ "
        "–ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.\n\n"
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω—ë–º."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_start_keyboard()
    )


@registration_router.callback_query(StateFilter(RegistrationStates.confirming_data), F.data == "change_registration")
async def change_registration(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await callback.message.edit_text(
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        reply_markup=get_skip_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏"
    await state.set_state(RegistrationStates.waiting_for_name)


@registration_router.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def btn_registration(message: Message, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    user = await get_user(session, message.from_user.id)
    
    if user and user.registration_complete:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ Random Coffee.\n\n"
            "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?",
            reply_markup=get_confirmation_keyboard()
        )
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await cmd_start(message, session) 