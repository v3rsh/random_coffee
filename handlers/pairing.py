import logging
import random
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy import select, and_, or_
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import User, Meeting, Interest
from keyboards import create_pairing_keyboard
from services.user_service import get_user, get_active_users
from services.meeting_service import create_meeting, get_user_meetings
from states import PairingStates

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä
pairing_router = Router()
logger = logging.getLogger(__name__)


@pairing_router.message(Command("find"))
async def cmd_find(message: Message, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    """
    user = await get_user(session, message.from_user.id)
    
    if not user or not user.registration_complete:
        await message.answer(
            "–ß—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–û—Ç–ø—Ä–∞–≤—å /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
    potential_matches = await find_potential_matches(session, user)
    
    if not potential_matches:
        await message.answer(
            "üîé –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–∂–¥–∏—Å—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞."
        )
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    matches_to_show = random.sample(potential_matches, min(len(potential_matches), 3))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ state
    await state.update_data(potential_matches=[user.telegram_id for user in matches_to_show])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    await message.answer(
        "üîé –ò—â—É —Ç–µ–±–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n"
        "*–ù–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:*",
        parse_mode="Markdown"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    for i, match in enumerate(matches_to_show, 1):
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
        common_interests = await get_common_interests(session, user, match)
        interests_text = ", ".join([f"{interest.emoji} {interest.name}" for interest in common_interests])
        
        user_info = (
            f"*{i}. {match.full_name}*, {match.role}\n"
            f"   –û—Ç–¥–µ–ª: {match.department}\n"
            f"   –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_text}\n"
            f"   –î–æ—Å—Ç—É–ø–µ–Ω: {match.available_day}, {match.available_time}"
        )
        
        await message.answer(user_info, parse_mode="Markdown")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–æ–ª–ª–µ–≥—É –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
        reply_markup=create_pairing_keyboard(matches_to_show)
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    await state.set_state(PairingStates.waiting_for_selection)


@pairing_router.callback_query(StateFilter(PairingStates.waiting_for_selection), F.data.startswith("user_"))
async def select_user(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_user_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_user = await get_user(session, selected_user_id)
    
    if not user or not selected_user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–µ—á—É
    meeting = await create_meeting(
        session, 
        user1_id=user.telegram_id, 
        user2_id=selected_user.telegram_id
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
    common_interests = await get_common_interests(session, user, selected_user)
    interests_text = ", ".join([f"{interest.emoji} {interest.name}" for interest in common_interests])
    
    meeting_info = (
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª(–∞) –≤—Å—Ç—Ä–µ—á—É —Å *{selected_user.full_name}*\n\n"
        f"*–û —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:*\n"
        f"üìã –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {selected_user.department}\n"
        f"üë®‚Äçüíº –†–æ–ª—å: {selected_user.role}\n"
        f"ü§ù –§–æ—Ä–º–∞—Ç: {selected_user.meeting_format.value if selected_user.meeting_format else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìç –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: {selected_user.city}, {selected_user.office}\n"
        f"üïí –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {selected_user.available_day}, {selected_user.available_time}\n\n"
        f"*–û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:*\n{interests_text}\n\n"
        f"–ù–∞–ø–∏—à–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ: @{selected_user.username}"
    )
    
    await callback.message.edit_text(meeting_info, parse_mode="Markdown")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    partner_message = (
        f"üéâ –•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! *{user.full_name}* –≤—ã–±—Ä–∞–ª(–∞) —Ç–µ–±—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏!\n\n"
        f"*–û —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:*\n"
        f"üìã –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {user.department}\n"
        f"üë®‚Äçüíº –†–æ–ª—å: {user.role}\n"
        f"ü§ù –§–æ—Ä–º–∞—Ç: {user.meeting_format.value if user.meeting_format else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìç –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: {user.city}, {user.office}\n"
        f"üïí –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {user.available_day}, {user.available_time}\n\n"
        f"*–û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:*\n{interests_text}\n\n"
        f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–ø–∏—à–µ—Ç —Ç–µ–±–µ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤—Å—Ç—Ä–µ—á–∏.\n"
        f"–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º(–∞) –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É: @{user.username}"
    )
    
    try:
        await callback.bot.send_message(
            selected_user.telegram_id, 
            partner_message, 
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@pairing_router.callback_query(StateFilter(PairingStates.waiting_for_selection), F.data == "more_users")
async def show_more_users(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(session, callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    state_data = await state.get_data()
    shown_user_ids = state_data.get("potential_matches", [])
    
    # –ò—â–µ–º –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    potential_matches = await find_potential_matches(session, user, exclude_ids=shown_user_ids)
    
    if not potential_matches:
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n"
            "–Ø –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –¥—Ä—É–≥—É—é –ø–∞—Ä—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ, "
            "–∏–ª–∏ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª—é–±–æ–º—É –∏–∑ –∫–æ–ª–ª–µ–≥ –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ."
        )
        await state.clear()
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    matches_to_show = random.sample(potential_matches, min(len(potential_matches), 3))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–º
    all_shown_ids = shown_user_ids + [user.telegram_id for user in matches_to_show]
    await state.update_data(potential_matches=all_shown_ids)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    await callback.message.edit_text(
        "üîé –í–æ—Ç –µ—â–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤:\n",
        parse_mode="Markdown"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    for i, match in enumerate(matches_to_show, 1):
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
        common_interests = await get_common_interests(session, user, match)
        interests_text = ", ".join([f"{interest.emoji} {interest.name}" for interest in common_interests])
        
        user_info = (
            f"*{i}. {match.full_name}*, {match.role}\n"
            f"   –û—Ç–¥–µ–ª: {match.department}\n"
            f"   –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_text}\n"
            f"   –î–æ—Å—Ç—É–ø–µ–Ω: {match.available_day}, {match.available_time}"
        )
        
        await callback.bot.send_message(
            callback.from_user.id,
            user_info,
            parse_mode="Markdown"
        )
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    await callback.bot.send_message(
        callback.from_user.id,
        "–í—ã–±–µ—Ä–∏ –∫–æ–ª–ª–µ–≥—É –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
        reply_markup=create_pairing_keyboard(matches_to_show)
    )


async def find_potential_matches(session: AsyncSession, user: User, exclude_ids=None):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    :param user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
    :param exclude_ids: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø–æ–∏—Å–∫–∞
    :return: –°–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
    """
    if exclude_ids is None:
        exclude_ids = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    exclude_ids.append(user.telegram_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö
    query = select(User).where(
        User.is_active == True,
        User.registration_complete == True,
        User.telegram_id.notin_(exclude_ids)
    )
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if user.meeting_format and user.meeting_format.value != "–ù–µ –≤–∞–∂–Ω–æ":
        query = query.where(
            or_(
                User.meeting_format == user.meeting_format,
                User.meeting_format.is_(None),
                User.meeting_format.value == "–ù–µ –≤–∞–∂–Ω–æ"
            )
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—Å—Ç—Ä–µ—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    recent_meetings = await get_user_meetings(session, user.telegram_id, limit=5)
    recent_partner_ids = []
    
    for meeting in recent_meetings:
        if meeting.user1_id == user.telegram_id:
            recent_partner_ids.append(meeting.user2_id)
        else:
            recent_partner_ids.append(meeting.user1_id)
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
    if recent_partner_ids:
        query = query.where(User.telegram_id.notin_(recent_partner_ids))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
    result = await session.execute(query)
    potential_matches = result.scalars().all()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    matches_with_scores = []
    for match in potential_matches:
        common_interests = await get_common_interests(session, user, match)
        matches_with_scores.append((match, len(common_interests)))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    matches_with_scores.sort(key=lambda x: x[1], reverse=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –±–µ–∑ –æ—Ü–µ–Ω–æ–∫
    return [match for match, score in matches_with_scores if score > 0]


async def get_common_interests(session: AsyncSession, user1: User, user2: User):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    
    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    :param user1: –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :param user2: –í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :return: –°–ø–∏—Å–æ–∫ –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user1_interests = [interest.id for interest in user1.interests]
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user2_interests = [interest.id for interest in user2.interests]
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
    common_interest_ids = set(user1_interests) & set(user2_interests)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    common_interests = []
    for interest_id in common_interest_ids:
        interest = await session.get(Interest, interest_id)
        if interest:
            common_interests.append(interest)
    
    return common_interests 