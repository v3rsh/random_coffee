from datetime import datetime, timedelta
from typing import List

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import Meeting, User, TopicType
from keyboards import get_topic_name, get_topic_emoji
from services.meeting_service import get_meeting, get_pending_feedback_meetings
from services.user_service import get_user


async def send_meeting_notifications(session: AsyncSession, meetings: List[Meeting]):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö.
    
    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        meetings: –°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    from app import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    
    for meeting in meetings:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1 = await get_user(session, meeting.user1_id)
        user2 = await get_user(session, meeting.user2_id)
        
        if not user1 or not user2:
            continue
        
        # –û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
        common_topics = set(topic.value for topic in user1.topics) & set(topic.value for topic in user2.topics)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_for_user1 = generate_meeting_message(user2, common_topics)
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_for_user2 = generate_meeting_message(user1, common_topics)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–≤—è–∑–∏
        kb_for_user1 = get_contact_keyboard(user2)
        kb_for_user2 = get_contact_keyboard(user1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            await bot.send_message(
                chat_id=user1.telegram_id,
                text=message_for_user1,
                reply_markup=kb_for_user1,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user1.telegram_id}: {e}")
        
        try:
            await bot.send_message(
                chat_id=user2.telegram_id,
                text=message_for_user2,
                reply_markup=kb_for_user2,
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user2.telegram_id}: {e}")


def generate_meeting_message(partner: User, common_topics) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.
    
    Args:
        partner: –ü–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
        common_topics: –û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    
    Returns:
        –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    topics_str = ""
    if common_topics:
        topics_str = "\n".join([
            f"‚Ä¢ {get_topic_emoji(TopicType(topic))} {get_topic_name(TopicType(topic))}"
            for topic in common_topics
        ])
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, –±–µ—Ä–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        topics_str = "\n".join([
            f"‚Ä¢ {get_topic_emoji(topic)} {get_topic_name(topic)}"
            for topic in partner.topics
        ])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
    work_hours = partner.work_hours_start
    if partner.work_hours_end:
        work_hours += f" - {partner.work_hours_end}"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏
    meeting_format = {
        "offline": "–û—Ñ—Ñ–ª–∞–π–Ω üè¢",
        "online": "–û–Ω–ª–∞–π–Ω üíª",
        "any": "–õ—é–±–æ–π üîÑ"
    }.get(partner.meeting_format.value, "–ù–µ —É–∫–∞–∑–∞–Ω")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üéâ *–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –¥–ª—è Random Coffee!*\n\n"
        f"üë§ *–ò–º—è:* {partner.full_name}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if partner.department:
        message += f"üè¢ *–û—Ç–¥–µ–ª/—Ä–æ–ª—å:* {partner.department}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    if work_hours:
        message += f"üïí *–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:* {work_hours}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏
    message += f"ü§ù *–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á–∏:* {meeting_format}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    message += f"üìå *–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã:*\n{topics_str}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
    message += (
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–∞—à–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∏. "
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! ‚òï"
    )
    
    return message


def get_contact_keyboard(user: User) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    Args:
        user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è
    
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–≤—è–∑–∏
    """
    kb = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏, –µ—Å–ª–∏ –µ—Å—Ç—å username
    if user.username:
        kb.add(InlineKeyboardButton(
            text="üì± –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É",
            url=f"https://t.me/{user.username}"
        ))
    
    return kb.as_markup()


async def send_feedback_reminders(session: AsyncSession):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫ –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏.
    
    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    from app import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    from services.user_service import get_active_users
    users = await get_active_users(session)
    
    for user in users:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏, —Ç—Ä–µ–±—É—é—â–∏–µ —Ñ–∏–¥–±–µ–∫–∞
        pending_feedback_meetings = await get_pending_feedback_meetings(session, user.telegram_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –±–µ–∑ —Ñ–∏–¥–±–µ–∫–∞
        for meeting in pending_feedback_meetings:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_id = meeting.user2_id if meeting.user1_id == user.telegram_id else meeting.user1_id
            partner = await get_user(session, partner_id)
            
            if not partner:
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ—à–ª–∞ –≤–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å {partner.full_name}?\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π —Ñ–∏–¥–±–µ–∫, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É–ª—É—á—à–∞—Ç—å —Å–µ—Ä–≤–∏—Å Random Coffee."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–¥–±–µ–∫–∞
            kb = InlineKeyboardBuilder()
            kb.add(InlineKeyboardButton(
                text="üìù –û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫",
                callback_data=f"feedback:{meeting.id}:{partner.telegram_id}"
            ))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            try:
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=message,
                    reply_markup=kb.as_markup()
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ñ–∏–¥–±–µ–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}") 