from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import User, Meeting, Feedback
from services.user_service import get_user, get_active_users
from services.meeting_service import get_user_meetings
from services.test_mode_service import activate_test_mode, deactivate_test_mode, get_test_mode_status, is_test_mode_active
from scheduler import reconfigure_scheduler

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
admin_router = Router()


def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    """
    from app import ADMIN_USER_ID
    return str(user_id) == str(ADMIN_USER_ID)


@admin_router.message(Command("admin"))
async def cmd_admin(message: Message, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = await session.scalar(select(func.count(User.telegram_id)))
    active_users = await session.scalar(
        select(func.count(User.telegram_id))
        .where(User.is_active == True)
        .where(User.registration_complete == True)
    )
    total_meetings = await session.scalar(select(func.count(Meeting.id)))
    total_feedback = await session.scalar(select(func.count(Feedback.id)))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    test_mode_info = ""
    if is_test_mode_active():
        test_mode_status = get_test_mode_status()
        test_mode_info = f"\n\nüß™ *–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú*\n{test_mode_status}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Random Coffee*\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
        f"ü§ù –í—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á: {total_meetings}\n"
        f"üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_feedback}\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/adminstats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/adminusers - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/adminmeetings - –°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á\n"
        "/adminfeedback - –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        f"{test_mode_info}"
    )
    
    await message.answer(stats_message, parse_mode="Markdown")


@admin_router.message(Command("admin_stats", "adminstats"))
async def cmd_admin_stats(message: Message, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """
    if not is_admin(message.from_user.id):
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
    departments = await session.execute(
        select(User.department, func.count(User.telegram_id))
        .where(User.department.isnot(None))
        .group_by(User.department)
    )
    departments_stats = "\n".join([
        f"‚Ä¢ {dept}: {count}" for dept, count in departments
    ]) if departments else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º –≤—Å—Ç—Ä–µ—á
    formats = await session.execute(
        select(User.meeting_format, func.count(User.telegram_id))
        .where(User.meeting_format.isnot(None))
        .group_by(User.meeting_format)
    )
    formats_stats = "\n".join([
        f"‚Ä¢ {fmt.value}: {count}" for fmt, count in formats
    ]) if formats else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –≤—Å—Ç—Ä–µ—á
    avg_rating = await session.scalar(
        select(func.avg(Feedback.rating))
        .where(Feedback.rating.isnot(None))
    )
    avg_rating = round(avg_rating, 1) if avg_rating else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    stats_message = (
        "üìà *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üè¢ *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º:*\n{departments_stats}\n\n"
        f"ü§ù *–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Å—Ç—Ä–µ—á:*\n{formats_stats}\n\n"
        f"‚≠ê *–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –≤—Å—Ç—Ä–µ—á:* {avg_rating}"
    )
    
    await message.answer(stats_message, parse_mode="Markdown")


@admin_router.message(Command("admin_users", "adminusers"))
async def cmd_admin_users(message: Message, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    if not is_admin(message.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await get_active_users(session)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    users_message = "üë• *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
    
    for user in users:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–µ—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        meetings_count = await session.scalar(
            select(func.count(Meeting.id))
            .where(
                (Meeting.user1_id == user.telegram_id) |
                (Meeting.user2_id == user.telegram_id)
            )
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        avg_rating = await session.scalar(
            select(func.avg(Feedback.rating))
            .where(Feedback.to_user_id == user.telegram_id)
            .where(Feedback.rating.isnot(None))
        )
        avg_rating = round(avg_rating, 1) if avg_rating else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
        
        users_message += (
            f"*{user.full_name}*\n"
            f"ID: {user.telegram_id}\n"
            f"–û—Ç–¥–µ–ª: {user.department or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–í—Å—Ç—Ä–µ—á: {meetings_count}\n"
            f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating}\n\n"
        )
    
    await message.answer(users_message, parse_mode="Markdown")


@admin_router.message(Command("admin_meetings", "adminmeetings"))
async def cmd_admin_meetings(message: Message, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—Å—Ç—Ä–µ—á.
    """
    if not is_admin(message.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤—Å—Ç—Ä–µ—á
    meetings = await session.execute(
        select(Meeting)
        .order_by(Meeting.created_at.desc())
        .limit(10)
    )
    meetings = meetings.scalars().all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    meetings_message = "ü§ù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:*\n\n"
    
    for meeting in meetings:
        user1 = await get_user(session, meeting.user1_id)
        user2 = await get_user(session, meeting.user2_id)
        
        if not user1 or not user2:
            continue
        
        meetings_message += (
            f"*–í—Å—Ç—Ä–µ—á–∞ #{meeting.id}*\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {user1.full_name} –∏ {user2.full_name}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {meeting.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' if meeting.is_confirmed else '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'}\n\n"
        )
    
    await message.answer(meetings_message, parse_mode="Markdown")


@admin_router.message(Command("admin_feedback", "adminfeedback"))
async def cmd_admin_feedback(message: Message, session: AsyncSession):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã.
    """
    if not is_admin(message.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–∑—ã–≤–æ–≤
    feedbacks = await session.execute(
        select(Feedback)
        .order_by(Feedback.created_at.desc())
        .limit(10)
    )
    feedbacks = feedbacks.scalars().all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    feedback_message = "üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:*\n\n"
    
    for feedback in feedbacks:
        from_user = await get_user(session, feedback.from_user_id)
        to_user = await get_user(session, feedback.to_user_id)
        
        if not from_user or not to_user:
            continue
        
        feedback_message += (
            f"*–û—Ç–∑—ã–≤ –æ—Ç {from_user.full_name} –¥–ª—è {to_user.full_name}*\n"
            f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * feedback.rating}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {feedback.comment or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n"
            f"–î–∞—Ç–∞: {feedback.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        )
    
    await message.answer(feedback_message, parse_mode="Markdown")


@admin_router.message(Command("admin_testmode", "testmode", "test_mode"))
async def cmd_admin_testmode(message: Message, session: AsyncSession):
    """
    –°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞.
    """
    if not is_admin(message.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    action = args[1].lower() if len(args) > 1 else "status"
    
    if action == "on":
        # –í–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if activate_test_mode():
            await message.answer("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                               "‚è± –í—Ä–µ–º—è —É—Å–∫–æ—Ä–µ–Ω–æ: 1 —á–∞—Å = 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n"
                               "üìÖ –í—Å—Ç—Ä–µ—á–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–∞—â–µ\n\n"
                               "–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /testmode off")
            # –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            reconfigure_scheduler()
        else:
            await message.answer("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    elif action == "off":
        # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if deactivate_test_mode():
            await message.answer("üîÑ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
                               "‚è± –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±—ã—á–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–µ–∂–∏–º\n\n"
                               "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /testmode on")
            # –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            reconfigure_scheduler()
        else:
            await message.answer("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω")
    
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = get_test_mode_status()
        commands_help = (
            "\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/testmode on - –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º\n"
            "/testmode off - –í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"
        )
        await message.answer(f"{status}{commands_help}")


# –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–∫—Ä—ã—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
@admin_router.message(Command("tm", "tmode"))
async def cmd_admin_testmode_alias(message: Message, session: AsyncSession):
    """
    –ê–ª–∏–∞—Å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞.
    """
    await cmd_admin_testmode(message, session) 